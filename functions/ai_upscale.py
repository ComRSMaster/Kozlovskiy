import time

import requests
from telebot.apihelper import ApiTelegramException
from telebot.types import Message, ForceReply
from telebot.util import extract_arguments

from helpers.bot import bot
from helpers.config import replicate_key
from helpers.storage import save, users


def upscale_cmd_handler(msg: Message):
    file_id = None
    if msg.reply_to_message is not None:
        if msg.reply_to_message.content_type == "photo":
            file_id = msg.reply_to_message.photo[-1].file_id
        elif msg.reply_to_message.content_type == "document":
            file_id = msg.reply_to_message.document.file_id
    try:
        scale = float(extract_arguments(msg.text))
    except ValueError:
        scale = 2
    if file_id is None:
        bot.send_message(msg.chat.id,
                         "<b>‚ú®–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å‚ú®</b>\n\n"
                         "–ß—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å <i>(–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è)\n</i>"
                         "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/up N</code> –Ω–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, "
                         "–≥–¥–µ N - –º–∞—Å—à—Ç–∞–± —É–ª—É—á—à–µ–Ω–∏—è, <i>(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)</i>\n"
                         f"–¢–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±: <b>{scale}</b>", 'HTML',
                         reply_markup=ForceReply(input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ"))
        users[str(msg.chat.id)]['s'] = 'up_photo'
        users[str(msg.chat.id)]['sd'] = scale
        save()
    else:
        gfpgan(msg.chat.id, file_id, scale)


def wait_photo_state(msg: Message):
    if msg.content_type == "photo":
        file_id = msg.photo[-1].file_id
    elif msg.content_type == "document":
        file_id = msg.document.file_id
    else:
        bot.send_message(msg.chat.id,
                         "–ú–æ–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–æ—Ç–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è.\n"
                         "<b>–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.</b>\n\n"
                         "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ /cancel</i>", 'HTML',
                         reply_markup=ForceReply(input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ"))
        return
    gfpgan(msg.chat.id, file_id, users[str(msg.chat.id)]['sd'])
    save()


def gfpgan(chat_id, file_id, scale):
    bot.send_chat_action(chat_id, "upload_document")
    post = requests.post(
        "https://api.replicate.com/v1/predictions",
        json={"version": "9283608cc6b7be6b65a8e44983db012355fde4132009bf99d976b2f0896856a3",
              "input": {"img": bot.get_file_url(file_id), "scale": scale}},
        headers={"Authorization": f"Token {replicate_key}", "Content-Type": "application/json"})
    rec_json = post.json()

    while rec_json['status'] not in ["succeeded", "failed", "canceled"]:
        time.sleep(0.5)
        get = requests.get(
            rec_json['urls']['get'],
            headers={"Authorization": f"Token {replicate_key}", "Content-Type": "application/json"})
        rec_json = get.json()
    if rec_json['status'] == "succeeded":
        try:
            bot.send_document(chat_id, rec_json['output'])
        except ApiTelegramException:
            bot.send_message(chat_id, rec_json['output'])
        users[str(chat_id)]['s'] = users[str(chat_id)]['sd'] = ''
        save()
    elif rec_json['status'] == "canceled":
        bot.send_message(chat_id, "<b>üõë –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>", 'HTML')
    else:
        if rec_json['error'].startswith("local variable"):
            bot.send_message(chat_id, "<b>‚ùå –¢–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è...</b>", 'HTML')
        else:
            bot.send_message(chat_id, f"<b>‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞...</b>", 'HTML')
